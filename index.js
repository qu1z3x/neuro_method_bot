// digfusion

import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import { config } from "./config.js";

import OpenAI from "openai";

import CryptoJS from "crypto-js";

const openai = new OpenAI({
	apiKey: config.openai[0].apiKey,
	organization: config.openai[0].organization,
});

import {
	sendDataAboutText,
	sendDataAboutButton,
	sendDataAboutError,
	sendDataAboutDataBase,
} from "./tgterminal.js";

// digfusion

const TOKEN = config.TOKENs[1]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

const qu1z3xId = "923690530";
const bogdanId = "814979361";

let BotName = "neuro_method_bot";

let usersData = [];
// let memberEmails = [
// 	"tarutinatusia@mail.ru",
// 	"Irashchirova@mail.ru",
// 	"evdokimowa.ol@yandex.ru",
// 	"Viktori11091983@gmail.com",
// 	"Irinanpf@mail.ru",
// 	"cmetaninaolga@bk.ru",
// 	"alisa-lu@list.ru",
// 	"mansts@yandex.ru",
// 	"rabota3838k@mail.ru",
// 	"kristinasadova@gmail.com",
// 	"alezzirealezzire@gmail.com",
// 	"Afanasyevaa@inbox.ru",
// 	"Indigo0206@gmail.com",
// 	"Chertovasvetlana81@mail.ru",
// 	"Rusalo4ka-25@mail.ru",
// 	"nadydommax@mail.ru",
// 	"lioa@inbox.ru",
// 	"A.x.i.n.y.a.g.o.g@gmail.com",
// 	"natalia.miller.schreiber@gmail.com",
// 	"N_galizina@mail.ru",
// 	"natalimelnichenko12@gmail.com",
// 	"missdzuba@inbox.ru",
// 	"natali-mv555@yandex.ru",
// 	"svetochek720@mail.ru",
// 	"elli-taro@mail.ru",
// 	"Z1mukimova@gmail.com",
// 	"rabota.e.a.d@yandex.ru",
// 	"milledy02@yandex.ru",
// 	"f-s-v1983@mail.ru",
// 	"deva.eva1@yandex.ru",
// 	"izmaylovams@yandex.ru",
// 	"Oliya.belova@yandex.ru",
// 	"dolginaelena0@gmail.com",
// 	"tgalkina@gmail.com",
// 	"kseniablake@gmail.com",
// 	"gnm.gk@web.de",
// 	"feneva-sochi@mail.ru",
// 	"nadyastas342@list.ru",
// 	"Cetrina@inbox.ru",
// 	"Tanya_nik2004@mail.ru",
// 	"Akyznetsova495@gmail.com",
// 	"vladima23@mail.ru",
// 	"i.aroslankina@yandex.ru",
// 	"natalysam77@icloud.com",
// 	"katavdeeva@gmail.com",
// 	"gorodz17@yandex.ru",
// 	"Palisa2003@mail.ru",
// 	"frolga2003@mail.ru",
// 	"pyshihvost@rambler.ru",
// 	"snkovalenko.67@mail.ru",
// 	"elevichmasha@gmail.com",
// 	"5800607@mail.ru",
// 	"Ir.gromova53@gmail.com",
// 	"sveta135531@mail.ru",
// 	"anastasiya070@gmail.com",
// 	"k.a.kuzmina@mail.ru",
// 	"Leon13256@mail.ru",
// 	"Magicmaris@yandex.ru",
// 	"Olga2290@mail.ru",
// 	"nkapustyanskaya@gmail.com",
// 	"saburova.saburova-sasha2016@yandex.ru",
// 	"zolotov-ivan95@rambler.ru",
// 	"irena.mia@yandex.ru",
// 	"dolche97@inbox.ru",
// 	"79647965677@yandex.ru",
// 	"egorova.dv@yandex.ru",
// 	"n.shtanina@mail.ru",
// 	"nataschulka.43@mail.ru",
// 	"super.parchina@yandex.ru",
// 	"anechka.agapova@list.ru",
// 	"kotovamargaritaed@yandex.ru",
// 	"Aliya424@rambler.ru",
// 	"bakulinBlowfish@mail.ru",
// 	"natalia.catapano@aol.com",
// 	"ek.guzovskaya@ya.ru",
// 	"mamaivana02@icloud.com",
// 	"nadia_t@mail.ru",
// 	"elena.kuksenok@yandex.ru",
// 	"maya.adambaeva8625@gmail.com",
// 	"Marinasann1111@mail.ru",
// 	"alekszhol@mail.ru",
// 	"Mercurievat19@gmail.com",
// 	"petyadobrinova@gmail.com",
// 	"eleanared@mail.ru",
// 	"Maliunia81@mail.ru",
// 	"natycek@mail.ru",
// 	"5993000@mail.ru",
// 	"vergine1@gmx.ch",
// 	"05zou05@gmail.com",
// 	"angela.dobinda@gmail.com",
// 	"nirvandi@gmail.com",
// 	"weronikadavydzik777@gmail.com",
// 	"Lenutza888@gmail.com",
// 	"rosaforos@mail.ru",
// 	"milenahi@yahoo.com",
// 	"kzlukmanova1@gmail.com",
// 	"shustrovao@gmail.com",
// 	"lenanekrasova@list.ru",
// 	"semja.will@gmail.com",
// 	"annasoma20@mail.ru",
// 	"moja_rabota@bk.ru",
// 	"Fedotovamn888.86@mail.ru",
// 	"yremchuk@mail.ru",
// 	"Inga.kraukle@gmail.com",
// 	"t9663270929@yandex.ru",
// 	"gs.beautybar@mail.ru",
// 	"kesnvk@mail.ru",
// 	"Yuliana_s-85@mail.ru",
// 	"elnare.tagieva@mail.ru",
// 	"Irina.Anoshina.msk@mail.ru",
// 	"egle338@gmail.com",
// 	"Inessafm@gmail.com",
// 	"Yelenabogdanoff@gmail.com",
// 	"kudimova_la@mail.ru",
// 	"jujik-55@mail.ru",
// 	"Anastation343@mail.ru",
// 	"8alina8yang8@mail.ru",
// 	"n_katsura@mail.ru",
// 	"Genexport2020@gmail.com",
// 	"Kiyvkv@gmail.com",
// 	"svetales888@gmail.com",
// 	"Lanamiamihomes@gmail.com",
// 	"98765-@mail.ru",
// 	"dta0207@yandex.ru",
// 	"Karmanovich090488@gmail.com",
// 	"Vera.u27@yandex.ru",
// 	"Celisheva_olga@mail.ru",
// 	"pad4evarovav@gmail.com",
// 	"tetiana@bk.ru",
// 	"Muqali2816@gmail.com",
// 	"yuliamargarita@mail.ru",
// 	"saidasheva-@mail.ru",
// 	"arzygulkarimova571@gmail.com",
// 	"Vfeodossieva@gmail.com",
// 	"lavr.krd@gmail.com",
// 	"Olga.kraizler@yandex.ru",
// 	"samhalovailana10@gmail.com",
// 	"lyapushka76@gmail.com",
// 	"vininox@icloud.com",
// 	"aina1234@bk.ru",
// 	"alex.a.grif@gmail.com",
// 	"ushakova8611@gmail.com",
// 	"Projectsofaq@gmail.com",
// 	"Bayramovazuleykha@gmail.com",
// 	"Julia.kulagina@gmail.com",
// 	"aberegovoii@mail.ru",
// 	"Komonova.nf@yandex.ru",
// 	"Evaharina@list.ru",
// 	"g.pinekenstein@web.de",
// 	"ksenia4342@yandex.ru",
// 	"Vangog-kamen@mail.ru",
// 	"temerzhanovadina@gmail.com",
// 	"kristinavier@gmail.com",
// 	"alenaburtovaya29@gmail.com",
// 	"nina-rylova@mail.ru",
// 	"yavid.luba@yahoo.com",
// 	"ekaterina49.49@mail.ru",
// 	"trofimova.natalya@mail.ru",
// 	"guranatalia482@gmail.com",
// 	"irisha2101@mail.ru",
// 	"Accutot@gmail.com",
// 	"akanikar@mail.ru",
// 	"efimovavika2006@mail.ru",
// 	"belousikjulka@mail.ru",
// 	"zacknata@yandex.ru",
// 	"Natali_grodno_83@mail.ru",
// 	"rinakent@mail.ru",
// 	"cspq@ya.ru",
// 	"ye.ginter@gmail.com",
// 	"AM087887@gmail.com",
// 	"tolkyn.mustafina@gmail.com",
// 	"Lesok82@mail.ru",
// 	"natavarf@yandex.ru",
// 	"l.tatyana@bk.ru",
// 	"milena.ld@gmail.com",
// 	"irinachernovaa@yandex.ru",
// 	"Vorirvlad89@yandex.ru",
// 	"tatyana9.92@mail.ru",
// 	"Karelia.woman@gmail.com",
// 	"pasterxxl@mail.ru",
// 	"anayram_look@yahoo.com",
// 	"garmonia497@gmail.com",
// 	"hk_gulya@mail.ru",
// 	"89032876700@yandex.ru",
// 	"vanina_marinova@yahoo.com",
// 	"mrsbannikova@mail.ru",
// 	"Tramontana_77@mail.ru",
// 	"alexapetrache96@gmail.com",
// 	"lalli.may@bk.ru",
// 	"okotenko82@gmail.com",
// 	"batyrowa70@mail.ru",
// 	"nona.schroeder07@gmail.com",
// 	"ate271108@rambler.ru",
// 	"nataliawallaceco@gmail.com",
// 	"Sj13102013@yandex.ru",
// 	"lisa0507@bk.ru",
// 	"Nazimgul91@mail.ru",
// 	"tatatabalaeva@bk.ru",
// 	"habibovagx@mail.ru",
// 	"Alinaaa_88@mail.ru",
// 	"belevskayaa@mail.ru",
// 	"bugaevat629@gmail.com",
// 	"I@dpapina.ru",
// 	"a.moshkova@gmail.com",
// 	"Inessafm@gmail.comom",
// 	"mashdem76@gmail.com",
// 	"olesy49@mail.ru",
// 	"Delonurbeksydykov@gmail.com",
// 	"Jkrohta@yandex.ru",
// 	"lazar.vladis@yandex.ru",
// 	"ava_lida@mail.ru",
// 	"weiss-t@bluewin.ch",
// 	"Ya-Iulia.Zaikina@yandex.ru",
// 	"natalya_halezina@mail.ru",
// 	"aroma_mary@mail.ru",
// 	"Zhakupova_madina1991@mail.ru",
// 	"yuliagrif@gmail.com",
// 	"dav-agaf@yandex.ru",
// 	"m.hafizova@witchesameli.com",
// 	"elvira-1974@yandex.ru",
// 	"olgaefremenko87@mail.ru",
// 	"palubvi@gmail.com",
// 	"Paubvi@gmail.com",
// 	"j.zaika@witchesameli.com",
// 	"g.pinekenstein@web.de",
// 	"e.zelenskaya@witchesameli.com",
// 	"9222078984@mail.ru",
// 	"gulnara77@inbox.ru",
// 	"panovapo94@mail.ru",
// 	"natalya.batushkina@gmail.com",
// 	"Rusalo4ka-25@mail.ru",
// 	"rusalo4ka-25@mail.ru",
// 	"lioa@inbox.ru",
// 	"nininichka@gmail.com",
// 	"rosi_s_georgieva@abv.bg",
// 	"figurova_olga@mail.ru",
// 	"e.v.stupnikova@bk.ru",
// 	"grishinaninapavlovna@gmail.com",
// 	"alga888@bk.ru",
// 	"olenka_box@mail.ru",
// 	"biyakanna@mail.ru",
// 	"namzyray-a@mail.ru",
// 	"jenny1786@list.ru",
// 	"surkuradedeeva82@gmail.com",
// 	"natalia.catapano@aol.com",
// 	"alekszhol@mail.ru",
// 	"Olza@inbox.ru",
// 	"olza@inbox.ru",
// 	"Vmetalnikova18@gmail.com",
// 	"vmetalnikova18@gmail.com",
// 	"naddina2002@mail.ru",
// 	"angela.dobinda@gmail.com",
// 	"samarskaya-katya@bk.ru",
// 	"ketrixen@yandex.ru",
// 	"79057527779new@gmail.com",
// 	"opus-75@mail.ru",
// 	"prudnikovanata79@gmail.com",
// 	"olya_status@mail.ru",
// 	"kontakt@nadinebokarev.com",
// 	"nirinia1@mail.ru",
// 	"irinagorst9@gmail.com",
// 	"projectsofaq@gmail.com",
// 	"juliex@mail.ru",
// 	"o.kondrina@witchesameli.com",
// 	"annakuzmina708@mail.ru",
// 	"d_sakyp@mail.ru",
// 	"vorirvlad89@yandex.ru",
// 	"oljaFriesen47@web.de",
// 	"vanina_marinova@yahoo.com",
// 	"alena-zav@yandex.ru",
// 	"a.cherepanova@witchesameli.com",
// 	"nona.schroeder07@gmail.com",
// 	"po4ta.snezh@ya.ru",
// 	"po4ta.snezh@ya.ru",
// 	"a.khaikova@witchesameli.com",
// ];

let lastUserActivity = {}; // –í—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

let match = null;

const weekDays = [
	{
		name: "–ü–Ω",
		fullName: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
	},
	{
		name: "–í—Ç",
		fullName: "–í—Ç–æ—Ä–Ω–∏–∫",
	},
	{ name: "–°—Ä", fullName: "–°—Ä–µ–¥–∞" },
	{
		name: "–ß—Ç",
		fullName: "–ß–µ—Ç–≤–µ—Ä–≥",
	},
	{
		name: "–ü—Ç",
		fullName: "–ü—è—Ç–Ω–∏—Ü–∞",
	},
	{
		name: "–°–±",
		fullName: "–°—É–±–±–æ—Ç–∞",
	},
	{
		name: "–í—Å",
		fullName: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	},
];

bot.setMyCommands([
	{
		command: "/restart",
		description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üè†",
	},

	{
		command: "/reset",
		description: "–°–±—Ä–æ—Å–∏—Ç—å –ò–ò ‚õî",
	},
]);
async function payMessage(chatId, stageNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (stageNum) {
			case 1:
				await bot.editMessageText(
					`<b>–ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å! –ü–æ–∫–∞ —É —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏!</b>\n\n–û—Ç–∫—Ä–æ–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤—É –æ—Ç –ê–¢–õ–ê–ù–¢–ê –∑–∞ 500—Ä/–º–µ—Å\n\n<b>–í—Å–µ –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `–û–ø–ª–∞—Ç–∏—Ç—å üí≥`,
										url: `https://apolllo.ru/atlant-pay?account_id=${chatId}`,
									},
								],
								[
									{
										text: `–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ`,
										callback_data: `deleteexcess`,
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				await bot
					.sendMessage(
						chatId,
						`<b>–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!</b>\n\n–ü—Ä–æ–¥–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤—É –æ—Ç –ê–¢–õ–ê–ù–¢–ê –∑–∞ 500—Ä/–º–µ—Å\n\n–ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø üëá`,
						{
							parse_mode: "HTML",
							disable_web_page_preview: true,

							reply_markup: {
								inline_keyboard: [
									[
										{
											text: `–û–ø–ª–∞—Ç–∏—Ç—å üí≥`,
											url: `https://apolllo.ru/atlant-pay?account_id=${chatId}`,
										},
									],
									[
										{
											text: `–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ`,
											callback_data: `deleteexcess`,
										},
									],
								],
							},
						}
					)
					.then((message) => {
						dataAboutUser.messageId = message.message_id;
					});

				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function firstMeeting(chatId, stageNum = 1, isCorrect = true) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.action = `firstMeeting${stageNum}`;

		switch (stageNum) {
			case 1:
				await bot.sendMessage(
					chatId,
					`<b>–ù–µ–π—Ä–æ–ú–µ—Ç–æ–¥ –Ω–∞ —Å–≤—è–∑–∏! üòâ\n\n–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∑–Ω–∞–Ω–∏–∏ –ú–µ—Ç–æ–¥–∞ –Æ–ª–∏–∏ –®–∏—Ä–æ–∫–∏—Ö</b> (–ò–≤–ª–∏–µ–≤–æ–π)`,
					{
						parse_mode: "HTML",
						disable_web_page_preview: true,
					}
				);

				firstMeeting(chatId, 2);

				break;
			case 2:
				await bot
					.sendMessage(
						chatId,
						`<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëãüèª</b>\n\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, <b>–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ üôÉ</b>`,
						{
							parse_mode: "HTML",
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –°–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã‚ùì",
											url: `https://t.me/amelisoul_support_bot`,
										},
									],
								],
							},
						}
					)
					.then((message) => {
						dataAboutUser.messageId = message.message_id;
					});

				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function menu(chatId, afterFirstMeeting = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();
		let textToSayHello = "";

		if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
		else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200) textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
		else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700) textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
		else if (dateNowHHNN >= 2200 || dateNowHHNN < 600) textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

		dataAboutUser.supportiveCount = 1;

		dataAboutUser.action = "menu";

		await bot.editMessageText(
			`${
				afterFirstMeeting
					? `<b>–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! üôè</b>`
					: `<b>${textToSayHello}, ${dataAboutUser.login}! </b>`
			}\n\n–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π!\n\n<blockquote><b>–ß—Ç–æ —è —É–º–µ—é:</b>\n- —É—Å—Ç—Ä–æ–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é\n- –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ –≤—Å—Ç—Ä–µ—á–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n- –æ–±–º–µ–Ω—è—Ç—å—Å—è –º—ã—Å–ª—è–º–∏ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ú–µ—Ç–æ–¥—É</blockquote>\n\n<b>–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ :)</b>\n\n<i>P.S. ‚Äì —è –µ—â–µ –æ–±—É—á–∞—é—Å—å, –ø–æ—ç—Ç–æ–º—É –∏–Ω–æ–≥–¥–∞ –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è. –ï—Å–ª–∏ —Ç–∞–∫–æ–µ —Å–ª—É—á–∏–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å" ü•∫</i>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º ü§î`,
								callback_data: `moreAbout`,
							},
						],
						[
							dataAboutUser.currentSession?.type == "trainingSession"
								? {
										text: `–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ ‚ñ∂Ô∏è`,
										callback_data: `currentTrainingSession`,
								  }
								: {
										text: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ò–ò üß†`,
										callback_data: `menuTrainingSession`,
								  },
						],
						[
							{
								text: `–ü–æ–º–æ—â—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º ü§ï`,
								callback_data: `menuHelpSession`,
							},
						],
						[
							{
								text: `–û–±–º–µ–Ω—è—Ç—å—Å—è –º—ã—Å–ª—è–º–∏ üó£Ô∏è`,
								callback_data: `menuTalkingSession`,
							},
						],
						[
							{
								text: `–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å‚ùì`,
								url: `https://t.me/bogdan_obukhovskii`,
							},
							{
								text: `–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüßë‚Äçüî¨ `,
								callback_data: `profile`,
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function moreAbout(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`–£ –º–µ–Ω—è –µ—Å—Ç—å <b>3 —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.</b>\n–í–æ—Ç –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ üôÉ\n\n<blockquote><b>1) –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ò–ò</b>\n- –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ä–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞, –∞ –≤—ã - –≤ —Ä–æ–ª–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞\n- —Å —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞, —è —Å–æ–∑–¥–∞—é —Å–µ–±–µ –ª–∏—á–Ω–æ—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–∑–Ω–∏, –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—à–µ–ª –∫ –≤–∞–º\n- –≤–∞—à–∞ –∑–∞–¥–∞—á–∞: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–π—Ç–∏ —Å–ª–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–æ–π –∑–∞–ø—Ä–æ—Å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ü–µ–ª—è—é—â—É—é —Ñ—Ä–∞–∑—É\n- –ø–æ –∏—Ç–æ–≥—É —Å–µ—Å—Å–∏–∏ —è –¥–∞–º –≤–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</blockquote>\n\n<blockquote><b>2) –ü–æ–º–æ—â—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º</b>\n- –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è —É—Ç–æ—á–Ω—è—é —É –≤–∞—Å –º–∞–∫—Å–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª–∏–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å\n- –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–µ—Å—Å–∏–∏ –≤–æ —á—Ç–æ –º–æ–∂–Ω–æ —É–≥–ª—É–±–∏—Ç—å—Å—è, –ø–æ–º–æ–≥–∞—é –ø—Ä–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Å–µ—Å—Å–∏–∏\n- –ø–æ–≤—ã—à–∞—é –≤–∞—à—É –Ω–∞—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ—Å—Ç—å</blockquote>\n\n<blockquote><b>3) –û–±–º–µ–Ω—è—Ç—å—Å—è –º—ã—Å–ª—è–º–∏</b>\n- –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞\n- —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ (–≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ üôÇ), —É –º–µ–Ω—è –±–æ–ª—å—à–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –Ω–∞—à–µ–π —Ç–µ–º–µ\n- —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂—É –¥–∏–∞–ª–æ–≥</blockquote>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
								callback_data: `exit`,
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

// digfusion

async function trainingSession(chatId, stageName = "generate") {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	const dataAboutSession = dataAboutUser.currentSession;

	try {
		let response = "";

		switch (stageName) {
			case "menu":
				await bot.editMessageText(
					`<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏\n—Å –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º üß†</b>\n\n–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –∫ –≤–∞–º –Ω–∞ —Å–µ—Å—Å–∏—é. –í—ã ‚Äì –≤ —Ä–æ–ª–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.\n\n<u>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</u>\n- –Ω–∞–π—Ç–∏ —Å–ª–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–æ–π –∑–∞–ø—Ä–æ—Å –∏ –¥–∞—Ç—å –∏—Å—Ü–µ–ª—è—é—â—É—é —Ñ—Ä–∞–∑—É. –ï—Å–ª–∏ –¥–æ–ª–≥–æ –∏–¥–µ—Ç–µ –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É, —è –º–æ–≥—É –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏.\n\n<blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –ú–µ—Ç–æ–¥–µ –∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –≥—Ä—É–±—ã—Ö –æ—à–∏–±–æ–∫ ‚Äì —è –æ–±—É—á–µ–Ω –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–µ—Å—Å–∏—è—Ö –∏ –±—É–¥—É –≤–µ—Å—Ç–∏ —Å–µ–±—è –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ö–æ–Ω–µ—á–Ω–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ —á–∞—Ç...\n\n–ü–æ –∏—Ç–æ–≥—É —Å–µ—Å—Å–∏–∏, —è –¥–∞–º –µ–π –æ—Ü–µ–Ω–∫—É –∏ –ø–æ–¥—Å–∫–∞–∂—É —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.</blockquote>\n\n<b>–ù–∞—á–Ω–µ–º?</b> `,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ‚ú®`,
										callback_data: `generateTrainingSession`,
									},
								],
								[
									{
										text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
										callback_data: `exit`,
									},
								],
							],
						},
					}
				);

				break;
			case "generate":
				await bot.editMessageText(
					`<b>–°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–ø–æ–ª–Ω—è—é –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é.. ü§î</b>\n\n<b>–î–æ–±–∞–≤–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤!</b>\n\n<i>–î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ.</i>\n\n<b>–í–∞—à–∞ —Ü–µ–ª—å: –≤—ã—è–≤–∏—Ç—å –∏ –ø–æ–º–æ—á—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ú–µ—Ç–æ–¥—É. –£–¥–∞—á–∏! ü§ó</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [[{ text: ``, callback_data: `-` }]],
						},
					}
				);

				response = await assistantResponse(chatId, `generateTrainingSession`, false);

				if (response) {
					dataAboutUser.currentSession = response;

					trainingSession(chatId, "start");
				} else {
					menu(chatId);
				}

				break;
			case "start":
				if (!dataAboutSession) {
					trainingSession(chatId, "generate");
				} else {
					dataAboutSession.type = "trainingSession";

					await bot.editMessageText(
						`<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏\n—Å –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º üß†\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã - –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–µ\n\nüë§ ${dataAboutSession.name} ‚Ä¢ ${dataAboutSession.gender}</b>\n<blockquote><i>${dataAboutSession.look}</i></blockquote>\n\n<b>ü§ï –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:</b><blockquote expandable><i>${dataAboutSession.problem}</i></blockquote>\n\n<b>–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–æ–ø–µ—á–Ω—ã–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!</b> –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è.`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: `–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å üîÑÔ∏è`,
											callback_data: `generateTrainingSession`,
										},
									],
									[
										{
											text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
											callback_data: `exit`,
										},
										{
											text: `–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå`,
											callback_data: `endTrainingSession`,
										},
									],
								],
							},
						}
					);
				}
				break;
			case "current":
				dataAboutSession.type = "trainingSession";

				await bot.editMessageText(
					`<b>–ù–∞–ø–æ–º–∏–Ω–∞—é, —Å–µ–π—á–∞—Å —É –≤–∞—Å –∫–ª–∏–µ–Ω—Ç:\n\nüë§ ${dataAboutSession.name} ‚Ä¢ ${dataAboutSession.gender}\n<blockquote><i>${dataAboutSession.look}</i></blockquote>\n\nü§ï –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:</b><blockquote expandable><i>${dataAboutSession.problem}</i></blockquote>\n<b>–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –¥–∏–∞–ª–æ–≥,</b> —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è.`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
										callback_data: `exit`,
									},
									{
										text: `–ó–∞–≤–µ—Ä—à–∏—Ç—å‚ùå`,
										callback_data: `endTrainingSession`,
									},
								],
							],
						},
					}
				);
				break;
			case "end":
				await bot.editMessageText(
					`<b>–°–µ—Å—Å–∏—è —Å–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ò–ò –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚ú®</b>\n\n<i>–î–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–µ–π –æ—Ü–µ–Ω–∫–∏, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ.</i>\n\n<b>–†–∞—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –∏ –¥—É–º–∞—é –Ω–∞–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [[{ text: ``, callback_data: `-` }]],
						},
					}
				);

				response = await assistantResponse(chatId, `endTrainingSession`, false);

				if (response) {
					await bot.editMessageText(response.text, {
						parse_mode: "Markdown",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [[{ text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`, callback_data: `exit` }]],
						},
					});

					dataAboutUser.currentSession = {};
				} else {
					menu(chatId);
				}
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function helpSession(chatId, stageName = "start") {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		const dataAboutSession = dataAboutUser.currentSession;

		switch (stageName) {
			case "reset":
				dataAboutUser.currentSession = {
					name: "",
					look: "",
					problem: "",

					type: "",
				};

				dataAboutUser.action = "helpSession";

				helpSession(chatId, "identification");
				break;
			case "menu":
				await bot.editMessageText(
					`<b>–ü–æ–º–æ—â—å –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ü§ï</b>\n\n<blockquote>–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è –∑–∞–ø—Ä–æ—à—É –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å –µ—Å—Ç—å.\n\n–ü–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–∏–∞–ª–æ–≥–∞ –∫ —Å–µ—Å—Å–∏–∏ –∏ –Ω–∞–π—Ç–∏ –∏–¥–µ–∏ –ø–æ —Å–ª–æ—è–º, –≥–¥–µ –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å –∑–∞–ø—Ä–æ—Å\n\n–û–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞, –∫–∞–∫ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º</blockquote>\n\n${
						dataAboutSession?.type == "helpSession"
							? `<b>–°–µ–π—á–∞—Å —É –≤–∞—Å –∑–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–º–æ—â–∏ –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ.\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é</b>`
							: `<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—ã –º–æ–≥–ª–∏ –∫ –Ω–µ–º—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–µ—Ä–µ–æ–±–¥—É–º–∞—Ç—å —Å–µ—Å—Å–∏—é</b>`
					}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									dataAboutSession?.type == "helpSession"
										? {
												text: `–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–º–æ—â–∏ ‚ùå`,
												callback_data: `endHelpSession`,
										  }
										: {
												text: `–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ü§ï`,
												callback_data: `resetHelpSession`,
										  },
								],
								[
									{
										text: `‚¨ÖÔ∏è–í –º–µ–Ω—é`,
										callback_data: `exit`,
									},
									{
										text: `–ö–ª–∏–µ–Ω—Ç—ã (${dataAboutUser.realClientsData.length}) üìã`,
										callback_data: `historyHelpSession`,
									},
								],
							],
						},
					}
				);
				break;
			case "identification":
				await bot.editMessageText(
					`<b>–ü–æ–º–æ—â—å –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ü§ï\n\n<blockquote>–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å" –æ–∫–æ–ª–æ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è\n\n–ö–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è "... ‚úèÔ∏è" –æ–∫–æ–ª–æ –ø–æ–ª—è - –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ</blockquote>\n\nüë§–ò–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ:\n<blockquote>${
						dataAboutUser.action == "editNameHelpSession"
							? `–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è <a href="https://t.me/${BotName}/?start=editcancelHelpSession">‚úèÔ∏è</a>`
							: `${
									dataAboutSession.name
							  } <a href="https://t.me/${BotName}/?start=editNameHelpSession">${
									dataAboutSession.name ? `–ü–æ–º–µ–Ω—è—Ç—å` : `–î–æ–±–∞–≤–∏—Ç—å`
							  }</a>`
					}</blockquote>\n–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n<blockquote><i>${
						dataAboutUser.action == "editLookHelpSession"
							? `–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è <a href="https://t.me/${BotName}/?start=editcancelHelpSession">‚úèÔ∏è</a>`
							: `${
									dataAboutSession.look
							  } </i><b><a href="https://t.me/${BotName}/?start=editLookHelpSession">${
									dataAboutSession.look ? `–ü–æ–º–µ–Ω—è—Ç—å` : `–î–æ–±–∞–≤–∏—Ç—å`
							  }</a></b><i>`
					}</i></blockquote>\n<b>–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:</b>\n<blockquote><i>${
						dataAboutUser.action == "editProblemHelpSession"
							? `–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è <a href="https://t.me/${BotName}/?start=editcancelHelpSession">‚úèÔ∏è</a>`
							: `${
									dataAboutSession.problem
							  } </i><b><a href="https://t.me/${BotName}/?start=editProblemHelpSession">${
									dataAboutSession.problem ? `–ü–æ–º–µ–Ω—è—Ç—å` : `–î–æ–±–∞–≤–∏—Ç—å`
							  }</a></b><i>`
					}</i></blockquote>\n\n<b>${
						dataAboutSession.name && dataAboutSession.look && dataAboutSession.problem
							? `–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—Ä–∞–Ω—ã! –£–∂–µ –≤–∏–∂—É –∫—É–¥–∞ –º–æ–∂–Ω–æ —É–≥–ª—É–±–∏—Ç—å—Å—è! –ü—Ä–∏—Å—Ç—É–ø–∏–º? üßê`
							: `–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ –∫–ª–∏–µ–Ω—Ç–µ!`
					}</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text:
											dataAboutSession.name &&
											dataAboutSession.look &&
											dataAboutSession.problem
												? `–£–∑–Ω–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –ò–ò ‚òëÔ∏è`
												: ``,
										callback_data: `createHelpSession`,
									},
								],
								[
									{
										text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
										callback_data: `menuHelpSession`,
									},
									{
										text:
											dataAboutSession.name ||
											dataAboutSession.look ||
											dataAboutSession.problem
												? `–°–±—Ä–æ—Å–∏—Ç—å üîÑÔ∏è`
												: "",
										callback_data: `resetHelpSession`,
									},
								],
							],
						},
					}
				);
				break;
			case "create":
				dataAboutSession.type = `helpSession`;

				dataAboutUser.realClientsData.push({
					name: dataAboutSession.name,
					look: dataAboutSession.look,
					problem: dataAboutSession.problem,
				});

				if (dataAboutUser.realClientsData.length > 3) dataAboutUser.realClientsData.shift();

				await bot.editMessageText(
					`<b>–î—É–º–∞—é –Ω–∞–¥ –≤—Å–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π.. üßê</b>\n\n<i>–î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ.</i>\n\n<b>–û–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π, –∫–∞–∫ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º! üòâ</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [[{ text: ``, callback_data: `-` }]],
						},
					}
				);
				console.log(dataAboutUser.currentSession);

				let response = await assistantResponse(
					chatId,
					`startHelpSession ${JSON.stringify(dataAboutUser.currentSession)}`,
					false
				);

				await bot.sendMessage(chatId, `<b>ü§ï –ü–æ–º–æ—â—å –æ—Ç –ò–ò:</b>\n\n${response.text}`, {
					parse_mode: "HTML",
					disable_web_page_preview: true,
				});

				try {
					await bot.deleteMessage(chatId, dataAboutUser.messageId);
				} catch (error) {}
				break;
			case "end":
				await bot
					.editMessageText(
						`<b>–°–µ—Å—Å–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò - –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ö–ª–∏–µ–Ω—Ç:</b>\n<blockquote><b>üë§ ${dataAboutSession.name}</b>\n\n<i>ü§ï "${dataAboutSession.problem}"</i></blockquote>\n\n<b>–ü–æ–∑–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞, —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ö–ª–∏–µ–Ω—Ç—ã üìã"</b>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `exit` },
										{
											text: `–ö–ª–∏–µ–Ω—Ç—ã (${dataAboutUser.realClientsData.length}) üìã`,
											callback_data: `historyHelpSession`,
										},
									],
								],
							},
						}
					)

					.then((message) => {
						dataAboutUser.messageId = message.message_id;
					});

				dataAboutUser.currentSession = {};
				break;

			case "history":
				let historyButtons = null;

				if (dataAboutUser.realClientsData.length > 0) {
					historyButtons = [];

					dataAboutUser.realClientsData.forEach((obj, index) => {
						historyButtons.push([
							{ text: `üë§ ${obj.name}`, callback_data: `chooseClient${index}` },
						]);
					});
				}

				await bot
					.editMessageText(
						`<b>–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ üë®‚Äçü¶≥</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∑–≥–æ—à—Ç—É—Ä–º—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º. –ò–ò –ø–æ–º–Ω–∏—Ç –≤–∞—à –ø—Ä–æ—à–ª—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ –Ω–µ–º—É, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ —Ç–∞–∫ –¥–∞–≤–Ω–æ.\n\n${
							historyButtons
								? `<b>–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ üëá</b>`
								: `<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ —Å–µ–π—á–∞—Å! üëá</b>`
						}`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									...(historyButtons || [
										[
											{
												text: `–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ü§ï`,
												callback_data: `resetHelpSession`,
											},
										],
									]),
									[
										{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `exit` },
										{
											text: "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å‚ùì",
											url: "https://t.me/bogdan_obukhovskii",
										},
									],
								],
							},
						}
					)
					.then((message) => {
						dataAboutUser.messageId = message.message_id;
					});
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function profile(chatId, editLogin = false, afterEdit = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (!editLogin) {
			await bot.editMessageText(
				`<b><i>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üßë‚Äçüî¨</i>\n\n–î–∞–Ω–Ω—ã–µ:\n</b>–õ–æ–≥–∏–Ω: <b>${
					dataAboutUser.login
				}</b> - <a href="https://t.me/${BotName}/?start=editLogin">–∏–∑–º–µ–Ω–∏—Ç—å</a>${
					dataAboutUser.phoneNumber
						? `\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>+${dataAboutUser.phoneNumber}</b>`
						: ``
				}\n\n<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n–í—Å–µ–≥–æ: <b>${
					dataAboutUser.sessionsData.totalCount
				}${
					dataAboutUser.sessionsData.totalCount == 0
						? ` - <a href="https://t.me/${BotName}/?start=menuTrainingSession">—Å–æ–∑–¥–∞—Ç—å</a>`
						: ``
				}</b>\n\n<b>–°–µ—Å—Å–∏–∏ –ø–æ–º–æ—â–∏:</b>\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>${
					dataAboutUser.realClientsData.length
				} ${
					dataAboutUser.realClientsData.length == 0
						? ` - <a href="https://t.me/${BotName}/?start=menuHelpSession">—Å–æ–∑–¥–∞—Ç—å</a>`
						: ` - <a href="https://t.me/${BotName}/?start=historyHelpSession">–≤—ã–±—Ä–∞—Ç—å</a>`
				}</b>\n\n–í—ã —Å –Ω–∞–º–∏ —Å <b>${dataAboutUser.date}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `exit` },
								// { text: `digfusion‚ùî`, callback_data: `digfusionInfo` }
							],
							[{ text: `–°–±—Ä–æ—Å–∏—Ç—å –ò–ò ‚õî`, callback_data: `reset` }],
						],
					},
				}
			);
		}
		if (editLogin) {
			dataAboutUser.action = "editLogin";

			await bot.editMessageText(
				`<i><b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ ‚öôÔ∏è\n\n</b>–õ–æ–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üîí</i><b>\n\n${
					afterEdit
						? `–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π: <code>${dataAboutUser.supportiveCount}</code>`
						: `–¢–µ–∫—É—â–∏–π: <code>${dataAboutUser.login}</code>`
				}${
					afterEdit
						? "\n\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞? ü§î"
						: "\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚úçÔ∏è"
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										dataAboutUser.login != dataAboutUser.telegramFirstName
											? "–°–±—Ä–æ—Å–∏—Ç—å üîÑÔ∏è"
											: ""
									}`,
									callback_data: "resetLogin",
								},
							],
							[
								{
									text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
									callback_data: "profile",
								},
								{
									text: `${afterEdit ? "–ü—Ä–∏–Ω—è—Ç—å‚úÖ" : ""}`,
									callback_data: "editLogin",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

// digfusion

async function talkingSession(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`<b>–û–±—â–µ–Ω–∏–µ —Å –ù–µ–π—Ä–æ–ú–µ—Ç–æ–¥–æ–º üó£Ô∏è\n\n–î–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∑–∞–ø—É—â–µ–Ω –≤—Å–µ–≥–¥–∞!\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≥–¥–µ —É–≥–æ–¥–Ω–æ!</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [[{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `exit` }]],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function digfusionInfo(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`<b><i>‚ùîdigfusion ‚Ä¢ –û –∫–æ–º–ø–∞–Ω–∏–∏ üíÅüèª‚Äç‚ôÇÔ∏è</i></b>\n\n<i>–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ <b>digfusion</b></i>\n<blockquote><b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø,</b> —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π <b>—Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ <b>—Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤</b> —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤! ‚òëÔ∏è\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ <b>–Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b> –∏ <b>–ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b> –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <b>Telegram –∫–∞–Ω–∞–ª–µ</b> –∏ <b>–±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ! ü§ó</b></blockquote>\n<b><a href="https://t.me/digfusion">–ò–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionbot">–£—Å–ª—É–≥–∏</a> ‚Ä¢ <a href="https://t.me/digfeedbacks">–û—Ç–∑—ã–≤—ã</a></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutUser.messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "profile" }]],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function assistantResponse(chatId, request, thinkingMessage = true) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (thinkingMessage) {
			const thinkingMessageVariations = dataAboutUser.currentSession?.type
				? dataAboutUser.currentSession?.type == "trainingSession"
					? [
							`üë§ ${dataAboutUser.currentSession.name} –ø–µ—á–∞—Ç–∞–µ—Ç..`,
							`üë§ ${dataAboutUser.currentSession.name} –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..`,
							`üë§ ${dataAboutUser.currentSession.name} –ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ..`,
					  ]
					: [
							`ü§ï –î—É–º–∞—é –Ω–∞–¥ —Å–∏—Ç—É–∞—Ü–∏–µ–π —Å –∫–ª–∏–µ–Ω—Ç–æ–º..`,
							`ü§ï –¢–∞–∞–∫, –¥—É–º–∞—é –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ–π –∫–ª–∏–µ–Ω—Ç–∞..`,
							`ü§ï –ü—Ä–∏–¥—É–º—ã–≤–∞—é —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞..`,
					  ]
				: [
						`–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º —Å –±–∞–∑–æ–π –ú–µ—Ç–æ–¥–∞.. üßê`,
						`–†—ã—Å–∫–∞—é –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º –∑–Ω–∞–Ω–∏–π –ú–µ—Ç–æ–¥–∞.. ü§î`,
						`–ü–µ—á–∞—Ç–∞—é –æ—Ç–≤–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ú–µ—Ç–æ–¥–∞.. ‚åõÔ∏è`,
				  ];

			let rndNum = Math.floor(Math.random() * thinkingMessageVariations.length);

			await bot
				.sendMessage(chatId, `<b>${thinkingMessageVariations[rndNum]}</b>`, {
					parse_mode: "HTML",
					disable_web_page_preview: true,
				})
				.then((message) => {
					dataAboutUser.messageIdOther = message.message_id;
				});
		}

		await openai.beta.threads.messages.create(dataAboutUser.assistantData.threadId, {
			role: "user",
			content: request,
		});

		bot.sendChatAction(chatId, "typing");

		const run = await openai.beta.threads.runs.createAndPoll(
			dataAboutUser.assistantData.threadId,
			{
				assistant_id: config.openai[0].assistantId,
			}
		);

		bot.sendChatAction(chatId, "typing");

		if (run.status == "completed") {
			const messages = await openai.beta.threads.messages.list(run.thread_id);

			bot.sendChatAction(chatId, "cancel");

			let response = messages.data
				.find((obj) => obj.role == "assistant")
				.content[0].text.value.replaceAll("```", "")
				.replaceAll("```", "")
				.replaceAll("json", "")
				.replaceAll("JSON", "")
				.replaceAll(/\„Äê.*?„Äë/g, "");

			console.log(response);

			try {
				if (JSON.parse(response)) {
					response = JSON.parse(response);

					if (thinkingMessage)
						try {
							await bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
						} catch (error) {}

					return response;
				}
			} catch (error) {
				console.log("–ù–∞—Ä—É–≥–∞–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!");

				return assistantResponse(
					chatId,
					"–ú–ê–ù–ì–û–ö–û–ö–û–°–ë–ê–ù–ê–ù–†–´–ë–ê. –ü—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞. –ü–µ—Ä–µ–ø–∏—à–∏ –µ–≥–æ —á–µ—Ç–∫–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–Ω–æ–≤–æ, –Ω–µ –æ—Ç—Å—Ç—É–ø–∞–π –æ—Ç –Ω–µ–µ, –∏–Ω–∞—á–µ —Ç–µ–±—è —Ä–∞—Å—Å—Ç—Ä–µ–ª—è—é—Ç! –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç —Å–µ–±—è –∏–∑–≤–∏–Ω–µ–Ω–∏–π, —Å–¥–µ–ª–∞–π –≤–∏–¥ –≤ –¥–∏–∞–ª–æ–≥–µ –∫–∞–∫ –±—É–¥—Ç–æ —è –Ω–µ –ø–∏—Å–∞–ª —Ç–µ–±–µ —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π",
					false
				);
			}
		} else {
			try {
				await bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
			} catch (error) {}

			console.log(run.status);

			await bot.sendMessage(
				chatId,
				`<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.. ü§ï</b>`,
				{
					parse_mode: "HTML",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å‚ùì",
									url: "https://t.me/bogdan_obukhovskii",
								},
							],
							[{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
						],
					},
				}
			);
		}
	} catch (error) {
		try {
			await bot.deleteMessage(chatId, dataAboutUser.messageIdOther);
		} catch (error) {}

		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

// digfusion

async function reset(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.action = "";
	dataAboutUser.currentSession = {};
	dataAboutUser.sessionsData = { correctCount: 0, totalCount: 0 };
	dataAboutUser.realClientsData = [];
	dataAboutUser.assistantData.threadId = "";

	try {
		await bot.sendMessage(
			chatId,
			`<b>–ú—ã —Å–±—Ä–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ò–ò –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–µ–Ω —Ç–æ—Ä–º–æ–∑–∏—Ç—å! –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè\n\n–ù–∞–∂–º–∏—Ç–µ: /restart! üòâ</b>`,
			{
				parse_mode: "HTML",
				disable_web_page_preview: true,
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function StartAll() {
	if (TOKEN == config.TOKENs[1]) BotName = "neuro_method_bot";
	if (TOKEN == config.TOKENs[0]) BotName = "digtestingbot";

	if (fs.readFileSync("DB.json") != "[]" && fs.readFileSync("DB.json") != "") {
		let dataFromDB = JSON.parse(fs.readFileSync("DB.json"));

		usersData = dataFromDB.usersData || null;
	}

	bot.on("text", async (message) => {
		const chatId = message.chat.id;
		let text = message.text;

		let dataAboutUser = usersData?.find((obj) => obj.chatId == chatId);

		if (!dataAboutUser) {
			usersData.push({
				chatId: chatId,
				login: message.from.first_name,
				phoneNumber: "",
				email: "",

				methodId: null,

				messageId: null,
				action: "",

				messageIdOther: null,
				telegramFirstName: message.from.first_name,
				supportiveCount: true,

				currentSession: {},

				paymentData: {
					access: false,
					lastTime: "",
				},

				// {
				// 	name: null,
				// 	gender: null,
				// 	look: null,
				// 	background: null,
				// 	problem: null,

				// 	selfStory: null,
				// 	familyStory: null,
				// 	problemSolving: null,
				// 	difficult: null,
				// },

				sessionsData: { correctCount: 0, totalCount: 0 },

				realClientsData: [],

				assistantData: {
					threadId: "",
					openaiNum: Math.floor(Math.random() * config.openai.length),
				},

				date: `${new Date().getDate().toString().padStart(2, "0")}.${(
					new Date().getMonth() + 1
				)
					.toString()
					.padStart(2, "0")}.${(new Date().getFullYear() % 100)
					.toString()
					.padStart(2, "0")}`,
			});

			dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
		}

		if (dataAboutUser) {
			try {
				if (
					dataAboutUser.paymentData.access ||
					dataAboutUser.action.includes("firstMeeting")
				) {
					if (!dataAboutUser.assistantData.threadId) {
						const thread = await openai.beta.threads.create();

						dataAboutUser.assistantData.threadId = thread.id;

						console.log(dataAboutUser.assistantData.threadId);
					}

					if (Array.from(text)[0] != "/") {
						if (
							dataAboutUser.action.includes("firstMeeting") ||
							dataAboutUser.action == "editLogin" ||
							(dataAboutUser.action?.includes("edit") &&
								dataAboutUser.action?.includes("HelpSession"))
						) {
							if (
								dataAboutUser.action == "editLogin" &&
								text != dataAboutUser.login
							) {
								dataAboutUser.supportiveCount = text;
								profile(chatId, true, true);
							}

							if (
								dataAboutUser.action.includes("edit") &&
								dataAboutUser.action.includes("HelpSession")
							) {
								match = dataAboutUser.action.match(/^edit(.*)HelpSession$/);

								if (text == "000") {
									dataAboutUser.currentSession = {
										name: "–ú–∞–∫—Å–∏–º –°–≤–∏–±–ª–æ–≤",
										look: "40 –ª–µ—Ç, —Å–≤–µ—Ç–ª–æ-–∫–∞—Ä–∏–µ –≥–ª–∞–∑–∞, –∫–æ—Ä–æ—Ç–∫–æ —Å—Ç—Ä–∏–∂–µ–Ω–Ω—ã–µ —Ä—É—Å—ã–µ –≤–æ–ª–æ—Å—ã. –û–¥–µ—Ç –≤ —Ç–µ–º–Ω—ã–π —Å–≤–∏—Ç–µ—Ä –∏ –¥–∂–∏–Ω—Å—ã. –°–∏–¥–∏—Ç —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ, –æ–±–ª–æ–∫–æ—Ç–∏–≤—à–∏—Å—å –Ω–∞ —Å–ø–∏–Ω–∫—É –∫—Ä–µ—Å–ª–∞.",
										problem:
											"–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö, –æ—â—É—â–µ–Ω–∏–µ –∑–∞—Å—Ç–æ—è –≤ –∫–∞—Ä—å–µ—Ä–µ.",

										type: "",
									};
								} else {
									dataAboutUser.currentSession[`${match[1]}`.toLowerCase()] =
										text;
								}

								dataAboutUser.action = "helpSession";

								helpSession(chatId, "identification");
							}

							try {
								await bot.deleteMessage(chatId, message.message_id);
							} catch (error) {}
						} else {
							const dataAboutSession = dataAboutUser.currentSession;

							try {
								bot.deleteMessage(chatId, dataAboutUser.messageId);
							} catch (error) {}

							let response = await assistantResponse(
								chatId,
								`${
									dataAboutSession?.type
										? dataAboutSession.type
										: "talkingSession"
								} ${text}`,
								true
							);

							await bot.sendMessage(
								chatId,
								`${
									dataAboutSession.type?.includes("trainingSession")
										? `*üë§ ${dataAboutSession.name}:*`
										: dataAboutSession.type?.includes("helpSession")
										? `*ü§ï –ü–æ–º–æ—â—å –æ—Ç –ò–ò:*`
										: `*üßë‚Äçüî¨ –û—Ç–≤–µ—Ç –æ—Ç –ù–µ–π—Ä–æ–ú–µ—Ç–æ–¥–∞:*`
								}\n\n${response.text}\n\n${
									response.action == "problemIsSolved"
										? `–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –≤–∞–º–∏! üòÜ`
										: response.action == "problemIsFailed"
										? `–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ–≤–æ–ª–µ–Ω. üòî`
										: ``
								}`,
								{
									parse_mode: "Markdown",
									disable_web_page_preview: true,
									reply_markup: {
										inline_keyboard: [
											[
												{
													text:
														response.action == "problemIsSolved"
															? "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é ‚úÖ"
															: response.action == "problemIsFailed"
															? `–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é ‚ùå`
															: ``,
													callback_data: "endTrainingSession",
												},
												// {
												// 	text: "–ù–∞–ø–∏—Å–∞—Ç—å üí≠",
												// 	url: "https://t.me/digsupport",
												// },
											],
										],
									},
								}
							);
						}
					} else {
						if (
							text.includes("/start menuTrainingSession") ||
							text.includes("/start generateTrainingSession") ||
							text.includes("/start startTrainingSession") ||
							text.includes("/start endTrainingSession") ||
							text.includes("/start currentTrainingSession")
						) {
							match = text.match(/^\/start (.*)TrainingSession$/);

							trainingSession(chatId, match[1]);
						}

						if (
							text.includes("/start menuHelpSession") ||
							text.includes("/start identificationHelpSession") ||
							text.includes("/start resetHelpSession") ||
							text.includes("/start createHelpSession") ||
							text.includes("/start endHelpSession") ||
							text.includes("/start historyHelpSession")
						) {
							match = text.match(/^\/start (.*)HelpSession$/);

							helpSession(chatId, match[1]);
						} else if (text.includes("/start edit") && text.includes("HelpSession")) {
							match = text.match(/^\/start edit(.*)HelpSession$/);

							dataAboutUser.action = `edit${match[1]}HelpSession`;

							helpSession(chatId, "identification");
						}

						if (text.includes("/start acs")) {
							match = text.match(/^\/start acs(.*)$/);

							if (!dataAboutUser.paymentData.access) {
								let decryptedText = CryptoJS.AES.decrypt(
									atob(match[1]),
									config.encryptionData.secretKey
								).toString(CryptoJS.enc.Utf8);

								console.log(decryptedText);

								if (decryptedText.includes("+") && decryptedText.includes("-")) {
									decryptedText = decryptedText.match(/^\+(.*)\-$/);
									console.log(decryptedText);

									if (
										!usersData.find(
											(obj) => obj.methodId && obj.methodId == decryptedText
										)
									) {
										// acs.push(decryptedText);

										dataAboutUser.methodId = decryptedText;

										dataAboutUser.paymentData.access = true;
										dataAboutUser.paymentData.lastTime = new Date().getTime();

										await bot.sendMessage(chatId, "„Ö§").then((message) => {
											dataAboutUser.messageId = message.message_id;
										});

										menu(chatId, true);
									} else {
										await bot.sendMessage(
											chatId,
											`<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! ‚òπÔ∏è\n\n–†–∞—Å—à–∏—Ñ: (${decryptedText})</b>`,
											{
												parse_mode: "HTML",
												disable_web_page_preview: true,
												reply_markup: {
													inline_keyboard: [
														[
															{
																text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –°–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã‚ùì",
																url: `https://t.me/amelisoul_support_bot`,
															},
														],
													],
												},
											}
										);
									}
								} else {
									await bot.sendMessage(
										chatId,
										`<b>–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è! üòê\n\n–†–∞—Å—à–∏—Ñ: (${decryptedText})</b>`,
										{
											parse_mode: "HTML",
											disable_web_page_preview: true,
											reply_markup: {
												inline_keyboard: [
													[
														{
															text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –°–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã‚ùì",
															url: `https://t.me/amelisoul_support_bot`,
														},
													],
												],
											},
										}
									);
								}
							} else {
								await bot.sendMessage(chatId, "„Ö§").then((message) => {
									dataAboutUser.messageId = message.message_id;
								});

								menu(chatId);
							}
						}

						switch (text) {
							case "/restart":
							case "/start":
								if (text == "/restart" && dataAboutUser.paymentData.access) {
									try {
										await bot.deleteMessage(chatId, dataAboutUser.messageId);
									} catch (error) {}

									await bot.sendMessage(chatId, "„Ö§").then((message) => {
										dataAboutUser.messageId = message.message_id;
									});

									menu(chatId);
								} else firstMeeting(chatId);
								break;
							case "/reset":
								bot.deleteMessage(chatId, dataAboutUser.messageId);

								reset(chatId);
								break;
							case "":
								break;
							case "":
								break;
							case "/start editLogin":
								profile(chatId, true);
								break;
							case "":
								break;
							case "":
								break;
							case "":
								break;
							case "/data":
								if (chatId == qu1z3xId || chatId == bogdanId) {
									fs.writeFileSync(
										"DB.json",
										JSON.stringify({ usersData: usersData }, null, 2)
									);
								}
								break;
						}

						try {
							await bot.deleteMessage(chatId, message.message_id);
						} catch (error) {}
					}
				} else {
					switch (text) {
						case "/restart":
						case "/start":
							try {
								await bot.deleteMessage(chatId, dataAboutUser.messageId);
							} catch (error) {}

							firstMeeting(chatId);
							break;
						case "":
							break;
						// case "/pay":
						// 	await bot.sendMessage(chatId, "„Ö§").then((message) => {
						// 		dataAboutUser.messageId = message.message_id;
						// 	});

						// 	payMessage(chatId, 1);
						// 	break;
						// case "/pay2":
						// 	payMessage(chatId, 2);
						// 	break;
					}
				}
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
			}

			// fs.writeFileSync(
			// 	"DB.json",
			// 	JSON.stringify({ usersData: usersData, }, null, 2)
			// );

			if (chatId != qu1z3xId) {
				sendDataAboutText(chatId, dataAboutUser.login, text);
			}
			lastUserActivity[chatId] = Date.now();
		}
	});

	// digfusion

	bot.on("callback_query", async (query) => {
		const chatId = query.message.chat.id;
		const data = query.data;

		let dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		if (dataAboutUser) {
			try {
				if (
					dataAboutUser.paymentData.access ||
					dataAboutUser.action.includes("firstMeeting")
				) {
					dataAboutUser.messageId = query.message.message_id;

					if (!dataAboutUser.inBlackList) {
						if (data.includes("firstMeeting")) {
							match = data.match(/^firstMeeting(.*)$/);

							firstMeeting(chatId, parseInt(match[1]));
						}

						if (
							data.includes("menuTrainingSession") ||
							data.includes("generateTrainingSession") ||
							data.includes("startTrainingSession") ||
							data.includes("endTrainingSession") ||
							data.includes("currentTrainingSession")
						) {
							match = data.match(/^(.*)TrainingSession$/);

							if (dataAboutUser.currentSession?.type == "helpSession") {
								bot.answerCallbackQuery(query.id, {
									text: `–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–º–æ—â–∏ –æ—Ç –ò–ò —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ, –¥–ª—è –Ω–∞—á–∞—Ç–∏—è —Å–ª–µ–¥—É—â–µ–π`,
									show_alert: true,
								});
							} else {
								trainingSession(chatId, match[1]);
							}
						}

						if (
							data.includes("menuHelpSession") ||
							data.includes("identificationHelpSession") ||
							data.includes("resetHelpSession") ||
							data.includes("createHelpSession") ||
							data.includes("endHelpSession") ||
							data.includes("historyHelpSession")
						) {
							match = data.match(/^(.*)HelpSession$/);

							if (dataAboutUser.currentSession?.type == "trainingSession") {
								bot.answerCallbackQuery(query.id, {
									text: `–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ, –¥–ª—è –Ω–∞—á–∞—Ç–∏—è —Å–ª–µ–¥—É—â–µ–π`,
									show_alert: true,
								});
							} else {
								helpSession(chatId, match[1]);
							}
						}

						if (data.includes("chooseClient")) {
							match = data.match(/^chooseClient(.*)$/);

							if (dataAboutUser.currentSession?.type == "helpSession") {
								bot.answerCallbackQuery(query.id, {
									text: `–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–º–æ—â–∏ –æ—Ç –ò–ò —Å –æ–¥–Ω–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ, –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞!`,
									show_alert: true,
								});
							} else {
								const certainClient =
									dataAboutUser.realClientsData[parseInt(match[1])];

								if (certainClient) {
									dataAboutUser.currentSession = {
										name: certainClient.name,
										look: certainClient.look,
										problem: certainClient.problem,

										type: "",
									};

									helpSession(chatId, "identification");
								}
							}
						}

						if (
							data.includes("previousPage") ||
							data.includes("nextPage") ||
							data.includes("firstPage")
						) {
							match = data.match(/^(.*)Page$/);

							if (match[1] == "previous" && dataAboutUser.supportiveCount > 1) {
								--dataAboutUser.supportiveCount;
							} else if (match[1] == "next") {
								++dataAboutUser.supportiveCount;
							} else if (match[1] == "first") {
								dataAboutUser.supportiveCount = 1;
							}

							// if (dataAboutUser.action == "workoutsHistoryList")
							workoutsHistoryList(chatId, 1);
						}

						// qbuttons

						switch (data) {
							case "exit":
								menu(chatId);
								break;

							case "reset":
								bot.deleteMessage(chatId, dataAboutUser.messageId);

								reset(chatId);
								break;
							case "":
								break;
							case "":
								break;
							case "":
								break;
							case "":
								break;
							case "profile":
								profile(chatId);
								break;
							case "digfusionInfo":
								digfusionInfo(chatId);
								break;
							case "resetLogin":
								dataAboutUser.login = dataAboutUser.telegramFirstName;

								bot.answerCallbackQuery(query.id, {
									text: `–í–∞—à –ª–æ–≥–∏–Ω —Å–Ω–æ–≤–∞ \n¬´${dataAboutUser.login}¬ª üòâ`,
									show_alert: true,
								});

								profile(chatId);
								break;
							case "editLogin":
								dataAboutUser.login = dataAboutUser.supportiveCount;

								bot.answerCallbackQuery(query.id, {
									text: `–í–∞—à –ª–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞\n¬´${dataAboutUser.login}¬ª üòâ`,
									show_alert: true,
								});

								profile(chatId);
								break;
							case "menuTalkingSession":
								if (dataAboutUser.currentSession?.type == "trainingSession") {
									bot.answerCallbackQuery(query.id, {
										text: `–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ, –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ù–µ–π—Ä–æ–ú–µ—Ç–æ–¥–æ–º!`,
										show_alert: true,
									});
								} else if (dataAboutUser.currentSession?.type == "helpSession") {
									bot.answerCallbackQuery(query.id, {
										text: `–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–º–æ—â–∏ –æ—Ç –ò–ò —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ, –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ù–µ–π—Ä–æ–ú–µ—Ç–æ–¥–æ–º!`,
										show_alert: true,
									});
								} else {
									talkingSession(chatId);
								}
								break;
							case "":
								break;
							case "":
								break;
							case "moreAbout":
								moreAbout(chatId);
								break;
							case "":
								break;
							case "":
								break;
							case "":
								break;
							case "deleteexcess":
								try {
									await bot.deleteMessage(chatId, query.message.message_id);
								} catch (error) {}
								break;
						}

						if (query.message.message_id == dataAboutUser.messageIdOther) {
							try {
								await bot.deleteMessage(chatId, query.message.message_id);
								dataAboutUser.messageIdOther = null;
							} catch (error) {}
						}
					}
				} else {
					// payMessage(chatId, 1);
					// dataAboutUser.supportiveCount =
					// 	dataAboutUser.supportiveCount != "email" &&
					// 	dataAboutUser.supportiveCount != "phoneNumber"
					// 		? `email`
					// 		: dataAboutUser.supportiveCount;
					// firstMeeting(chatId, 3);
				}

				if (chatId != qu1z3xId) {
					sendDataAboutButton(chatId, dataAboutUser.login, data);
				}

				lastUserActivity[chatId] = Date.now();
			} catch (error) {
				if (String(error).includes("Cannot read properties of undefined")) {
					menu(chatId);
				}

				console.log(error);
				sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
			}
		}
	});

	// digfusion

	cron.schedule(`0 */10 * * * *`, function () {
		try {
			for (const chatId in lastUserActivity) {
				if (Date.now() - lastUserActivity[chatId] > 5 * 60 * 1000) {
					const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

					if (dataAboutUser.type) {
						bot.sendMessage(chatId, "<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—â–µ–Ω–∏–µ? üôÉ</b>", {
							parse_mode: "HTML",
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: `–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚úÖ`,
											callback_data: `deleteexcess`,
										},
									],
									[
										{
											text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –°–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã‚ùì",
											url: `https://t.me/amelisoul_support_bot`,
										},
									],
								],
							},
						});
						delete lastUserActivity[chatId]; // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
					}
				}
			}
		} catch (error) {}
	});

	cron.schedule(`0 */1 * * *`, function () {
		try {
			if (TOKEN == config.TOKENs[1]) {
				fs.writeFileSync("DB.json", JSON.stringify({ usersData: usersData }, null, 2));

				if (new Date().getHours() % 12 == 0)
					sendDataAboutDataBase({ usersData: usersData });
			}
		} catch (error) {}
	});
}

StartAll();

// digfusion
