// digfusion

import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import { config } from "./config.js";

import OpenAI from "openai";

const openai = new OpenAI({
	apiKey: config.openai[0].apiKey,
	organization: config.openai[0].organization,
});

import {
	sendDataAboutText,
	sendDataAboutButton,
	sendDataAboutError,
	sendDataAboutDataBase,
} from "./tgterminal.js";

// digfusion

const TOKEN = config.TOKENs[0]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

const qu1z3xId = "923690530";
const bogdanId = "814979361";

let BotName = "metod_bot";

let usersData = [];

let match = null;

const weekDays = [
	{
		name: "–ü–Ω",
		fullName: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
	},
	{
		name: "–í—Ç",
		fullName: "–í—Ç–æ—Ä–Ω–∏–∫",
	},
	{ name: "–°—Ä", fullName: "–°—Ä–µ–¥–∞" },
	{
		name: "–ß—Ç",
		fullName: "–ß–µ—Ç–≤–µ—Ä–≥",
	},
	{
		name: "–ü—Ç",
		fullName: "–ü—è—Ç–Ω–∏—Ü–∞",
	},
	{
		name: "–°–±",
		fullName: "–°—É–±–±–æ—Ç–∞",
	},
	{
		name: "–í—Å",
		fullName: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	},
];

bot.setMyCommands([
	{
		command: "/restart",
		description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üè†",
	},
]);

async function firstMeeting(chatId, stageNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.action = `firstMeeting${stageNum}`;

		switch (stageNum) {
			case 1:
				await bot.sendMessage(
					chatId,
					`<b>–ú–µ—Ç√≥–¥–∏—Å –Ω–∞ —Å–≤—è–∑–∏! üòâ\n\n<b>–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∑–Ω–∞–Ω–∏–∏ –ú–µ—Ç–æ–¥–∞ –Æ–ª–∏–∏ –ò–≤–ª–∏–µ–≤–æ–π</b>\n\n</b>`,
					{
						parse_mode: "HTML",
						disable_web_page_preview: true,
					}
				);

				firstMeeting(chatId, 2);

				break;
			case 2:
				await bot
					.sendMessage(
						chatId,
						`–î–∞–≤–∞–π—Ç–µ <b>–Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ!\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚úçÔ∏è</b>`,
						{
							parse_mode: "HTML",
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: `–û—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.login} ‚òëÔ∏è`,
											callback_data: `firstMeeting3`,
										},
									],
								],
							},
						}
					)
					.then((message) => {
						dataAboutUser.messageId = message.message_id;
					});
				break;
			case 3:
				await bot.editMessageText(
					`<b>${dataAboutUser.login},</b> –æ—á–µ–Ω—å –ø—Ä—è—Ç–Ω–æ! üòÅ\n\n–ù–∞ <b>—ç—Ç–æ–º —ç—Ç–∞–ø–µ,</b> —è –ø–æ–ø—Ä–æ—à—É <b>–≤–∞—Å</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>. üòä`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
						disable_web_page_preview: true,
						// reply_markup: {
						// 	inline_keyboard: [[{ text: "", callback_data: "-" }]],
						// },
					}
				);

				await bot
					.sendMessage(chatId, `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>—É–¥–æ–±–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ! ‚¨áÔ∏è</b>`, {
						parse_mode: "HTML",
						disable_web_page_preview: true,
						reply_markup: {
							keyboard: [
								[
									{
										text: "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
										request_contact: true,
										resize_keyboard: true,
									},
								],
							],
						},
					})
					.then((message) => {
						dataAboutUser.messageIdOther = message.message_id;
					});

				break;

			case 4:
				menu(chatId, true);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function menu(chatId, afterFirstMeeting = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();
		let textToSayHello = "";

		if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
		else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200) textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
		else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700) textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
		else if (dateNowHHNN >= 2200 || dateNowHHNN < 600) textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

		dataAboutUser.supportiveCount = 1;

		dataAboutUser.action = "menu";

		await bot.editMessageText(
			`${
				afterFirstMeeting
					? `<b>${dataAboutUser.login}, —Ä–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! üôè</b>`
					: `<b>${textToSayHello}, ${dataAboutUser.login}! </b>`
			}\n\n<blockquote><b>–ì–æ—Ç–æ–≤ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –ø–æ —Å–∏—Å—Ç–µ–º–µ –ú–µ—Ç–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!\n\n–ò–ª–∏ –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–æ–±—â–∞—Ç—å—Å—è" üòä</b></blockquote>\n\n<b>–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å?</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							dataAboutUser.currentSession?.type == "trainingSession"
								? {
										text: `–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ ‚ñ∂Ô∏è`,
										callback_data: `currentTrainingSession`,
								  }
								: {
										text: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ò–ò üß†`,
										callback_data: `menuTrainingSession`,
								  },
						],
						[
							{
								text: `–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìö`,
								callback_data: `trainingMaterials`,
							},
							{
								text: `–ü—Ä–æ –ú–µ—Ç–æ–¥ ü§î`,
								callback_data: `moreAbout`,
							},
						],
						[
							{
								text: `–ü–æ–º–æ—â—å —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª–∏–µ–Ω—Ç–∞ ü§ï`,
								callback_data: `menuHelpSession`,
							},
						],
						[
							{
								text: `–ü—Ä–æ—Ñ–∏–ª—å ü§µ‚Äç‚ôÇÔ∏è`,
								callback_data: `profile`,
							},
							{
								text: `–ü–æ–æ–±—â–∞—Ç—å—Å—è üó£Ô∏è`,
								callback_data: `menuTalkingSession`,
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

// ‚ùó the rest of the code is commercial and not shown

//

// total lines of code: 1500

//

StartAll();

// digfusion
